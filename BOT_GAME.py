import logging
import random
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

#Telegram TOKEN
BOT_TOKEN = "7546943111:AAEz0DCb5R1mmkYcMNu0x9NhVE9EittRROI"  # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ ---
DATA_DIR = "data"
JOKES_FILE = os.path.join(DATA_DIR, "jokes.txt")
FACTS_FILE = os.path.join(DATA_DIR, "facts.txt")
CITIES_FILE = os.path.join(DATA_DIR, "cities.txt")
HANGMAN_WORDS_FILE = os.path.join(DATA_DIR, "words_hangman.txt")
WORDLE_WORDS_FILE = os.path.join(DATA_DIR, "words_wordle.txt")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ) ---
ALL_JOKES = []
ALL_FACTS = []
ALL_CITIES = []
ALL_HANGMAN_WORDS = []
ALL_WORDLE_WORDS = []

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–≥—Ä ---
RPS_CHOICES = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
HANGMAN_STAGES = [
    """
       -----
       |   |
           |
           |
           |
           |
    --------
    """,
    """
       -----
       |   |
      X_X   |
           |
           |
           |
    --------
    """,
    """
       -----
       |   |
      X_X   |
       |   |
           |
           |
    --------
    """,
    """
       -----
       |   |
      X_X   |
      /|   |
           |
           |
    --------
    """,
    """
       -----
       |   |
      X_X   |
      /|\  |
           |
           |
    --------
    """,
    """
       -----
       |   |
      X_X   |
      /|\  |
      /    |
           |
    --------
    """,
    """
       -----
       |   |
      X_X   |
      /|\  |
      / \  |
           |
    --------
    """
]
WORDLE_MAX_GUESSES = 6
WORDLE_WORD_LENGTH = 5
RUSSIAN_ALPHABET = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2 ---
def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    if not isinstance(text, str):
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return "".join(f'\\{char}' if char in escape_chars else char for char in text)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ ---
def load_data_from_file(filepath):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, —É–¥–∞–ª—è—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º."""
    try:
        if not os.path.exists(filepath):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            os.makedirs(os.path.dirname(filepath), exist_ok=True)
            with open(filepath, 'w', encoding='utf-8') as f:
                if "jokes" in filepath:
                    f.write("–≠—Ç–æ —à—É—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ–∞–π–ª jokes.txt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
                elif "facts" in filepath:
                    f.write("–≠—Ç–æ —Ñ–∞–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ–∞–π–ª facts.txt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
                elif "cities" in filepath:
                    f.write("–º–æ—Å–∫–≤–∞\n")
                elif "words_hangman" in filepath:
                    f.write("—Å–ª–æ–≤–æ\n")
                elif "words_wordle" in filepath:
                    f.write("—Å–ª–æ–≤–æ\n")
                else:
                    f.write("–î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: {filepath} —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

        with open(filepath, "r", encoding="utf-8") as f:
            items = [line.strip() for line in f if line.strip()]
        if not items:
            logger.warning(f"–§–∞–π–ª –ø—É—Å—Ç: {filepath}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            if "jokes" in filepath: return ["–≠—Ç–æ —à—É—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ–∞–π–ª jokes.txt –ø—É—Å—Ç."]
            if "facts" in filepath: return ["–≠—Ç–æ —Ñ–∞–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ–∞–π–ª facts.txt –ø—É—Å—Ç."]
            if "cities" in filepath: return ["–º–æ—Å–∫–≤–∞"]
            if "words_hangman" in filepath: return ["—Å–ª–æ–≤–æ"]
            if "words_wordle" in filepath: return ["—Å–ª–æ–≤–æ"]
            return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ."]
        return items
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return []


def initialize_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    global ALL_JOKES, ALL_FACTS, ALL_CITIES, ALL_HANGMAN_WORDS, ALL_WORDLE_WORDS
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤...")
    ALL_JOKES = load_data_from_file(JOKES_FILE)
    ALL_FACTS = load_data_from_file(FACTS_FILE)
    ALL_CITIES = [city.lower() for city in load_data_from_file(CITIES_FILE)]
    ALL_HANGMAN_WORDS = [word.lower() for word in load_data_from_file(HANGMAN_WORDS_FILE)]
    ALL_WORDLE_WORDS = [word.lower() for word in load_data_from_file(WORDLE_WORDS_FILE) if
                        len(word) == WORDLE_WORD_LENGTH]

    if not ALL_WORDLE_WORDS:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –¥–ª–∏–Ω–æ–π {WORDLE_WORD_LENGTH} –≤ {WORDLE_WORDS_FILE}. Wordle –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        ALL_WORDLE_WORDS.append("—Å–ª–æ–≤–æ")
    if not ALL_CITIES: ALL_CITIES.append("–º–æ—Å–∫–≤–∞")
    if not ALL_HANGMAN_WORDS: ALL_HANGMAN_WORDS.append("—Å–ª–æ–≤–æ")

    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALL_JOKES)} —à—É—Ç–æ–∫, {len(ALL_FACTS)} —Ñ–∞–∫—Ç–æ–≤.")
    logger.info(
        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALL_CITIES)} –≥–æ—Ä–æ–¥–æ–≤, {len(ALL_HANGMAN_WORDS)} —Å–ª–æ–≤ –¥–ª—è –í–∏—Å–µ–ª–∏—Ü—ã, {len(ALL_WORDLE_WORDS)} —Å–ª–æ–≤ –¥–ª—è Wordle.")


def get_random_item_with_memory(items_list: list, memory_key: str, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞ –≤—Å–µ –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã."""
    if not items_list:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç."

    seen_items = context.user_data.get(memory_key, set())
    available_items = [item for item in items_list if item not in seen_items]

    if not available_items:
        seen_items = set()
        available_items = items_list
        if not available_items:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã."

    chosen_item = random.choice(available_items)
    seen_items.add(chosen_item)
    context.user_data[memory_key] = seen_items
    return chosen_item


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä ---
def clear_game_state(context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    active_game = context.user_data.pop('active_game', None)
    keys_to_pop = ['guess_number_data', 'cities_data', 'hangman_data', 'wordle_data']
    for key in keys_to_pop:
        context.user_data.pop(key, None)
    logger.info(f"–û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: {active_game} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context._user_id or context._chat_id}")
    return active_game


def get_game_over_keyboard(game_callback_data_restart: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã."""
    keyboard = [
        [InlineKeyboardButton("–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=game_callback_data_restart)],
        [InlineKeyboardButton("–ú–µ–Ω—é –∏–≥—Ä üéÆ", callback_data="show_game_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    user = update.effective_user
    clear_game_state(context)
    keyboard = [
        ["–ê–Ω–µ–∫–¥–æ—Ç üòÇ", "–§–∞–∫—Ç üí°"],
        ["–ò–≥—Ä—ã üéÆ"],
        ["–ü–æ–º–æ—â—å ‚ùì"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π. –ß–µ–º –∑–∞–π–º–µ–º—Å—è?"
        "\n–ï—Å–ª–∏ —Ç—ã –±—ã–ª –≤ –∏–≥—Ä–µ, –æ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        reply_markup=reply_markup,
    )


async def help_command_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–¥–µ–π—Å—Ç–≤–∏–µ)."""
    help_text = (
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏):</b>\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "–ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "–ê–Ω–µ–∫–¥–æ—Ç - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç\n"
        "–§–∞–∫—Ç - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "–ò–≥—Ä—ã - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–≥—Ä\n"
        "/stop_game - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n\n"
        "<b>–ò–≥—Ä—ã (–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ò–≥—Ä—ã' –∏–ª–∏ –ø—Ä—è–º—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏):</b>\n"
        "/guess_number - –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'\n"
        "/rps - –ò–≥—Ä–∞ '–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞'\n"
        "/cities - –ò–≥—Ä–∞ '–ì–æ—Ä–æ–¥–∞'\n"
        "/hangman - –ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞'\n"
        "/wordle - –ò–≥—Ä–∞ 'Wordle' (—É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤)"
    )
    await update.message.reply_html(help_text)


async def joke_command_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç (–¥–µ–π—Å—Ç–≤–∏–µ)."""
    await update.message.reply_text(get_random_item_with_memory(ALL_JOKES, "seen_jokes", context))


async def fact_command_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç (–¥–µ–π—Å—Ç–≤–∏–µ)."""
    await update.message.reply_text(get_random_item_with_memory(ALL_FACTS, "seen_facts", context))


async def game_menu_command_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä (–¥–µ–π—Å—Ç–≤–∏–µ)."""
    clear_game_state(context)
    keyboard = [
        [InlineKeyboardButton("üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_start_guess_number")],
        [InlineKeyboardButton("üóø‚úÇÔ∏èüìú –ö–ù–ë", callback_data="game_start_rps")],
        [InlineKeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥–∞", callback_data="game_start_cities")],
        [InlineKeyboardButton("ü™ìü¶ë –í–∏—Å–µ–ª–∏—Ü–∞", callback_data="game_start_hangman")],
        [InlineKeyboardButton("üü©üü® Wordle", callback_data="game_start_wordle")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:"
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)
        except Exception as e:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è game_menu: {e}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ.")
        await update.callback_query.answer()
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)


async def stop_game_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É."""
    stopped_game = clear_game_state(context)
    if stopped_game:
        await update.message.reply_text(f"–ò–≥—Ä–∞ '{stopped_game}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –º–µ–Ω—é.")
    else:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")


# --- –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ" ---
async def start_guess_number_game(update: Update, context: ContextTypes.DEFAULT_TYPE, from_command=False) -> None:
    clear_game_state(context)
    chat_id = update.effective_chat.id
    target_number = random.randint(1, 100)
    context.user_data['active_game'] = 'guess_number'
    context.user_data['guess_number_data'] = {
        "target_number": target_number,
        "attempts": 0,
        "max_attempts": 7
    }
    logger.info(f"–ß–∞—Ç {chat_id}: –ù–∞—á–∞—Ç–∞ –∏–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'. –ó–∞–≥–∞–¥–∞–Ω–æ: {target_number}")
    message_text = ("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å! –£ —Ç–µ–±—è 7 –ø–æ–ø—ã—Ç–æ–∫.\n"
                    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á–∏—Å–ª–æ. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /stop_game")

    if from_command:
        await update.message.reply_text(message_text)
    elif update.callback_query:
        # –î–ª—è –∏–≥—Ä, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Markdown –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –º–æ–∂–Ω–æ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        await update.callback_query.edit_message_text(text="–ó–∞–ø—É—Å–∫–∞—é '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'")
        await update.callback_query.message.reply_text(message_text)
        await update.callback_query.answer()


async def handle_guess_number_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ."""
    game_data = context.user_data.get('guess_number_data')
    if not game_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /guess_number")
        clear_game_state(context)
        return

    try:
        guess = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ.")
        return

    game_data["attempts"] += 1
    target = game_data["target_number"]
    attempts_left = game_data["max_attempts"] - game_data["attempts"]
    reply_markup = None
    message = ""

    if guess == target:
        message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {target} –∑–∞ {game_data['attempts']} –ø–æ–ø—ã—Ç–æ–∫!"
        reply_markup = get_game_over_keyboard("game_start_guess_number")
        clear_game_state(context)
    elif attempts_left <= 0:
        message = f"–£–≤—ã, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {target}."
        reply_markup = get_game_over_keyboard("game_start_guess_number")
        clear_game_state(context)
    elif guess < target:
        message = f"–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}"
    else:  # guess > target
        message = f"–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}"

    await update.message.reply_text(message, reply_markup=reply_markup)


# --- –ò–≥—Ä–∞ "–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞" ---
async def start_rps_game(update: Update, context: ContextTypes.DEFAULT_TYPE, from_command=False) -> None:
    clear_game_state(context)
    keyboard = [
        [
            InlineKeyboardButton("–ö–∞–º–µ–Ω—å üóø", callback_data="rps_choice_–∫–∞–º–µ–Ω—å"),
            InlineKeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è", callback_data="rps_choice_–Ω–æ–∂–Ω–∏—Ü—ã"),
            InlineKeyboardButton("–ë—É–º–∞–≥–∞ üìú", callback_data="rps_choice_–±—É–º–∞–≥–∞"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = "–¢–≤–æ–π —Ö–æ–¥! –í—ã–±–∏—Ä–∞–π:"

    if from_command:
        await update.message.reply_text(message_text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)
        await update.callback_query.answer()


async def handle_rps_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_choice = query.data.split("_")[2]
    bot_choice = random.choice(RPS_CHOICES)

    result_text = f"–¢—ã –≤—ã–±—Ä–∞–ª: {user_choice.capitalize()}\n–Ø –≤—ã–±—Ä–∞–ª: {bot_choice.capitalize()}\n\n"

    if user_choice == bot_choice:
        result_text += "ü§ù –ù–∏—á—å—è!"
    elif (user_choice == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
            (user_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞") or \
            (user_choice == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å"):
        result_text += "ü•≥ –¢—ã –ø–æ–±–µ–¥–∏–ª!"
    else:
        result_text += "üòî –Ø –ø–æ–±–µ–¥–∏–ª!"

    reply_markup = get_game_over_keyboard("game_start_rps")
    await query.edit_message_text(text=result_text, reply_markup=reply_markup)


# --- –ò–≥—Ä–∞ "–ì–æ—Ä–æ–¥–∞" ---
async def start_cities_game(update: Update, context: ContextTypes.DEFAULT_TYPE, from_command=False) -> None:
    clear_game_state(context)
    context.user_data['active_game'] = 'cities'
    context.user_data['cities_data'] = {
        "used_cities": set(),
        "current_letter": None,
        "bot_last_city": None
    }
    if not ALL_CITIES:
        msg = "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç. –ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É."
        if from_command:
            await update.message.reply_text(msg)
        elif update.callback_query:
            await update.callback_query.edit_message_text(text=msg)
            await update.callback_query.answer()
        return

    first_city = random.choice(ALL_CITIES)
    context.user_data['cities_data']['used_cities'].add(first_city)

    last_char_for_next_turn = first_city[-1]
    if last_char_for_next_turn in ['—å', '—ä', '—ã']:
        if len(first_city) > 1:
            last_char_for_next_turn = first_city[-2]
        else:
            await update.message.reply_text("–ù–µ–æ–±—ã—á–Ω—ã–π –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥, –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—É–∫–≤—É –¥–ª—è —Ö–æ–¥–∞.")
            return

    context.user_data['cities_data']['current_letter'] = last_char_for_next_turn
    context.user_data['cities_data']['bot_last_city'] = first_city

    message_text = (f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –≤ –ì–æ—Ä–æ–¥–∞! –Ø –Ω–∞—á–Ω—É.\n–ú–æ–π –≥–æ—Ä–æ–¥: <b>{first_city.capitalize()}</b>.\n"
                    f"–¢–µ–±–µ –Ω–∞ –±—É–∫–≤—É '<b>{last_char_for_next_turn.upper()}</b>'.\n"
                    "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥–æ—Ä–æ–¥. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /stop_game")

    if from_command:
        await update.message.reply_text(message_text, parse_mode=ParseMode.HTML)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text="–ó–∞–ø—É—Å–∫–∞—é '–ì–æ—Ä–æ–¥–∞'")
        await update.callback_query.message.reply_text(message_text, parse_mode=ParseMode.HTML)
        await update.callback_query.answer()


async def handle_cities_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    game_data = context.user_data.get('cities_data')
    if not game_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /cities")
        clear_game_state(context)
        return

    user_city = update.message.text.lower().strip()
    reply_markup = None

    if not user_city:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    if user_city not in ALL_CITIES:
        await update.message.reply_text(
            f"–Ø –Ω–µ –∑–Ω–∞—é –≥–æ—Ä–æ–¥–∞ '{user_city.capitalize()}'. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ.")
        return

    if user_city in game_data["used_cities"]:
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ '{user_city.capitalize()}' —É–∂–µ –±—ã–ª. –î–∞–≤–∞–π –¥—Ä—É–≥–æ–π!")
        return

    expected_letter = game_data["current_letter"]
    if not user_city.startswith(expected_letter):
        await update.message.reply_text(
            f"–¢–≤–æ–π –≥–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –±—É–∫–≤—É '<b>{expected_letter.upper()}</b>'. "
            f"–ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ –±—ã–ª <b>{game_data['bot_last_city'].capitalize()}</b>. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        return

    game_data["used_cities"].add(user_city)

    bot_needed_letter = user_city[-1]
    if bot_needed_letter in ['—å', '—ä', '—ã']:
        if len(user_city) > 1:
            bot_needed_letter = user_city[-2]
        else:
            message = f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≥–æ—Ä–æ–¥! –Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏–¥—É–º–∞—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ '<b>{bot_needed_letter.upper()}</b>'. –¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ"
            reply_markup = get_game_over_keyboard("game_start_cities")
            clear_game_state(context)
            await update.message.reply_html(message, reply_markup=reply_markup)
            return

    possible_bot_cities = [
        city for city in ALL_CITIES
        if city.startswith(bot_needed_letter) and city not in game_data["used_cities"]
    ]

    if not possible_bot_cities:
        message = f"–û–≥–æ! –Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏–¥—É–º–∞—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ '<b>{bot_needed_letter.upper()}</b>'. –¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ"
        reply_markup = get_game_over_keyboard("game_start_cities")
        clear_game_state(context)
        await update.message.reply_html(message, reply_markup=reply_markup)
        return

    bot_city = random.choice(possible_bot_cities)
    game_data["used_cities"].add(bot_city)
    game_data["bot_last_city"] = bot_city

    next_user_letter = bot_city[-1]
    if next_user_letter in ['—å', '—ä', '—ã']:
        if len(bot_city) > 1:
            next_user_letter = bot_city[-2]
        else:
            message = f"–ú–æ–π –≥–æ—Ä–æ–¥: {bot_city.capitalize()}. –ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ"
            reply_markup = get_game_over_keyboard("game_start_cities")
            clear_game_state(context)
            await update.message.reply_html(message, reply_markup=reply_markup)
            return

    game_data["current_letter"] = next_user_letter
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –ú–æ–π –≥–æ—Ä–æ–¥: <b>{bot_city.capitalize()}</b>.\n"
        f"–¢–µ–±–µ –Ω–∞ –±—É–∫–≤—É '<b>{next_user_letter.upper()}</b>'.",
        parse_mode=ParseMode.HTML
    )


# --- –ò–≥—Ä–∞ "–í–∏—Å–µ–ª–∏—Ü–∞" ---
def get_hangman_display(word, guessed_letters):
    display = ""
    for letter in word:
        if letter in guessed_letters:
            display += letter + " "
        else:
            display += "_ "
    return display.strip()


async def start_hangman_game(update: Update, context: ContextTypes.DEFAULT_TYPE, from_command=False) -> None:
    clear_game_state(context)
    if not ALL_HANGMAN_WORDS:
        msg = "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –í–∏—Å–µ–ª–∏—Ü—ã –ø—É—Å—Ç. –ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É."
        if from_command:
            await update.message.reply_text(msg)
        elif update.callback_query:
            await update.callback_query.edit_message_text(text=msg)
            await update.callback_query.answer()
        return

    target_word = random.choice(ALL_HANGMAN_WORDS)
    context.user_data['active_game'] = 'hangman'
    context.user_data['hangman_data'] = {
        "word": target_word,
        "guessed_letters": set(),
        "wrong_attempts": 0,
        "max_wrong_attempts": len(HANGMAN_STAGES) - 1
    }

    logger.info(f"–ß–∞—Ç {update.effective_chat.id}: –ù–∞—á–∞—Ç–∞ –∏–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞'. –ó–∞–≥–∞–¥–∞–Ω–æ: {target_word}")

    display_word_str = get_hangman_display(target_word, set())

    intro_text = escape_markdown_v2("–ò–≥—Ä–∞–µ–º –≤ –í–∏—Å–µ–ª–∏—Ü—É!")  # "!" —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
    hangman_art = HANGMAN_STAGES[0]
    word_prompt = escape_markdown_v2(f"–°–ª–æ–≤–æ: ({len(target_word)} –±—É–∫–≤)")
    instruction_text = escape_markdown_v2("–û—Ç–ø—Ä–∞–≤—å –±—É–∫–≤—É (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞). –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /stop_game")

    message_text = (
        f"{intro_text}\n"
        f"```\n{hangman_art}\n```\n"
        f"{word_prompt} `{escape_markdown_v2(display_word_str)}`\n"
        f"{instruction_text}"
    )

    if from_command:
        await update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN_V2)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text=escape_markdown_v2("–ó–∞–ø—É—Å–∫–∞—é '–í–∏—Å–µ–ª–∏—Ü—É'"),
                                                      parse_mode=ParseMode.MARKDOWN_V2)
        await update.callback_query.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN_V2)
        await update.callback_query.answer()


async def handle_hangman_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    game_data = context.user_data.get('hangman_data')
    if not game_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /hangman")
        clear_game_state(context)
        return

    guess = update.message.text.lower().strip()
    reply_markup = None
    message = ""

    if not guess or not guess.isalpha() or len(guess) != 1:
        await update.message.reply_text(escape_markdown_v2("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –æ–¥–Ω—É –±—É–∫–≤—É (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)."),
                                        parse_mode=ParseMode.MARKDOWN_V2)
        return

    if guess in game_data["guessed_letters"]:
        await update.message.reply_text(escape_markdown_v2(f"–ë—É–∫–≤—É '{guess.upper()}' —Ç—ã —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é."),
                                        parse_mode=ParseMode.MARKDOWN_V2)
        return

    game_data["guessed_letters"].add(guess)
    target_word = game_data["word"]
    display_word_str = get_hangman_display(target_word, game_data["guessed_letters"])

    guessed_letters_str = escape_markdown_v2(", ".join(sorted(list(game_data["guessed_letters"]))))

    if guess in target_word:
        hangman_art_current = HANGMAN_STAGES[game_data["wrong_attempts"]]
        if "_" not in display_word_str:
            win_text_part1 = escape_markdown_v2(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ: ")
            win_text_part2 = f"**{escape_markdown_v2(target_word.upper())}**"
            win_text_part3 = escape_markdown_v2("!")
            win_text = win_text_part1 + win_text_part2 + win_text_part3

            message = (
                f"```\n{hangman_art_current}\n```\n"
                f"{win_text}"
            )
            reply_markup = get_game_over_keyboard("game_start_hangman")
            clear_game_state(context)
        else:
            correct_guess_text = escape_markdown_v2("–ï—Å—Ç—å —Ç–∞–∫–∞—è –±—É–∫–≤–∞!")  # "!" —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
            message = (
                f"{correct_guess_text}\n"
                f"```\n{hangman_art_current}\n```\n"
                f"{escape_markdown_v2('–°–ª–æ–≤–æ:')} `{escape_markdown_v2(display_word_str)}`\n"
                f"{escape_markdown_v2(f'–û—à–∏–±–æ–∫: {game_data["wrong_attempts"]}/{game_data["max_wrong_attempts"]}')}\n"
                f"{escape_markdown_v2('–ù–∞–∑–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã:')} {guessed_letters_str}"
            )
    else:
        game_data["wrong_attempts"] += 1
        hangman_art_current = HANGMAN_STAGES[game_data["wrong_attempts"]]
        if game_data["wrong_attempts"] >= game_data["max_wrong_attempts"]:
            lose_text_part1 = escape_markdown_v2(f"üòî –£–≤—ã, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: ")
            lose_text_part2 = f"**{escape_markdown_v2(target_word.upper())}**"
            lose_text_part3 = escape_markdown_v2(".")
            lose_text = lose_text_part1 + lose_text_part2 + lose_text_part3

            message = (
                f"```\n{hangman_art_current}\n```\n"
                f"{lose_text}"
            )
            reply_markup = get_game_over_keyboard("game_start_hangman")
            clear_game_state(context)
        else:
            wrong_guess_text = escape_markdown_v2("–£–ø—Å, —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç.")  # "." —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
            message = (
                f"{wrong_guess_text}\n"
                f"```\n{hangman_art_current}\n```\n"
                f"{escape_markdown_v2('–°–ª–æ–≤–æ:')} `{escape_markdown_v2(display_word_str)}`\n"
                f"{escape_markdown_v2(f'–û—à–∏–±–æ–∫: {game_data["wrong_attempts"]}/{game_data["max_wrong_attempts"]}')}\n"
                f"{escape_markdown_v2('–ù–∞–∑–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã:')} {guessed_letters_str}"
            )

    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)


# --- –ò–≥—Ä–∞ "Wordle" ---
def get_wordle_feedback(guess, target):
    feedback = ["‚¨ú"] * WORDLE_WORD_LENGTH
    target_list = list(target)
    guess_list = list(guess)

    for i in range(WORDLE_WORD_LENGTH):
        if guess_list[i] == target_list[i]:
            feedback[i] = "üü©"
            target_list[i] = None
            guess_list[i] = "#"

    for i in range(WORDLE_WORD_LENGTH):
        if guess_list[i] != "#":
            if guess_list[i] in target_list:
                feedback[i] = "üü®"
                target_list[target_list.index(guess_list[i])] = None
    return "".join(feedback)


def format_wordle_alphabet_status(letter_statuses):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –±—É–∫–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –¥–ª—è Wordle —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    # –ë—É–∫–≤—ã —ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ —Å–ø–∏—Å–æ–∫, join –∏—Ö –Ω–µ –∏–∑–º–µ–Ω–∏—Ç
    greens = sorted([l.upper() for l, s in letter_statuses.items() if s == 'green'])
    yellows = sorted([l.upper() for l, s in letter_statuses.items() if s == 'yellow'])
    grays = sorted([l.upper() for l, s in letter_statuses.items() if s == 'gray'])

    status_parts = []
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º f-—Å—Ç—Ä–æ–∫–∏
    if greens: status_parts.append(f"üü© {escape_markdown_v2('–ó–µ–ª–µ–Ω—ã–µ')}: {escape_markdown_v2(', '.join(greens))}")
    if yellows: status_parts.append(f"üü® {escape_markdown_v2('–ñ–µ–ª—Ç—ã–µ')}: {escape_markdown_v2(', '.join(yellows))}")
    if grays: status_parts.append(f"‚¨ú {escape_markdown_v2('–°–µ—Ä—ã–µ')}: {escape_markdown_v2(', '.join(grays))}")

    if not status_parts:
        return escape_markdown_v2("–°—Ç–∞—Ç—É—Å –±—É–∫–≤: –ü–æ–∫–∞ –Ω–µ —É–≥–∞–¥–∞–Ω–æ.")
    return escape_markdown_v2("–°—Ç–∞—Ç—É—Å –±—É–∫–≤:\n") + "\n".join(
        status_parts)  # status_parts —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏


async def start_wordle_game(update: Update, context: ContextTypes.DEFAULT_TYPE, from_command=False) -> None:
    clear_game_state(context)
    if not ALL_WORDLE_WORDS:
        msg = f"–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è Wordle (–¥–ª–∏–Ω–æ–π {WORDLE_WORD_LENGTH}) –ø—É—Å—Ç. –ù–µ –º–æ–≥—É –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É."
        if from_command:
            await update.message.reply_text(msg)
        elif update.callback_query:
            await update.callback_query.edit_message_text(text=msg)
            await update.callback_query.answer()
        return

    target_word = random.choice(ALL_WORDLE_WORDS)
    context.user_data['active_game'] = 'wordle'
    context.user_data['wordle_data'] = {
        "word": target_word,
        "guesses_history": [],
        "attempts": 0,
        "letter_statuses": {letter: "not_guessed" for letter in RUSSIAN_ALPHABET}
    }
    logger.info(f"–ß–∞—Ç {update.effective_chat.id}: –ù–∞—á–∞—Ç–∞ –∏–≥—Ä–∞ 'Wordle'. –ó–∞–≥–∞–¥–∞–Ω–æ: {target_word}")

    title_text = escape_markdown_v2(
        f"–ò–≥—Ä–∞–µ–º –≤ Wordle! –Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {WORDLE_WORD_LENGTH} –±—É–∫–≤.")  # "!" —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
    attempts_text = escape_markdown_v2(f"–£ —Ç–µ–±—è {WORDLE_MAX_GUESSES} –ø–æ–ø—ã—Ç–æ–∫.")  # "." —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
    instruction_text = escape_markdown_v2(
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Å–ª–æ–≤–æ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞). –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /stop_game")  # "." —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
    legend_text = escape_markdown_v2(
        "üü© - –±—É–∫–≤–∞ –Ω–∞ –≤–µ—Ä–Ω–æ–º –º–µ—Å—Ç–µ\n"
        "üü® - –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –Ω–∞ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ\n"
        "‚¨ú - —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ"
    )  # "-" —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
    message_text = (
        f"{title_text}\n"
        f"{attempts_text}\n"
        f"{instruction_text}\n\n"
        f"{legend_text}"
    )

    if from_command:
        await update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN_V2)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text=escape_markdown_v2("–ó–∞–ø—É—Å–∫–∞—é 'Wordle'"),
                                                      parse_mode=ParseMode.MARKDOWN_V2)
        await update.callback_query.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN_V2)
        await update.callback_query.answer()


async def handle_wordle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    game_data = context.user_data.get('wordle_data')
    if not game_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /wordle")
        clear_game_state(context)
        return

    guess = update.message.text.lower().strip()
    reply_markup = None

    if len(guess) != WORDLE_WORD_LENGTH or not guess.isalpha():
        await update.message.reply_text(
            escape_markdown_v2(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–ª–æ–≤–æ –∏–∑ {WORDLE_WORD_LENGTH} –±—É–∫–≤ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)."),
            parse_mode=ParseMode.MARKDOWN_V2)
        return

    game_data["attempts"] += 1
    target_word = game_data["word"]
    feedback = get_wordle_feedback(guess, target_word)
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    game_data["guesses_history"].append((escape_markdown_v2(guess.upper()), feedback))

    for i, char_guess in enumerate(guess):
        current_char_status = game_data["letter_statuses"].get(char_guess, "not_guessed")
        feedback_char_status = "gray"
        if feedback[i] == "üü©":
            feedback_char_status = "green"
        elif feedback[i] == "üü®":
            feedback_char_status = "yellow"

        if feedback_char_status == "green":
            game_data["letter_statuses"][char_guess] = "green"
        elif feedback_char_status == "yellow" and current_char_status != "green":
            game_data["letter_statuses"][char_guess] = "yellow"
        elif feedback_char_status == "gray" and current_char_status not in ["green", "yellow"]:
            game_data["letter_statuses"][char_guess] = "gray"

    alphabet_status_text = format_wordle_alphabet_status(game_data["letter_statuses"])
    history_text = "\n".join([f"{g_word}: {fb}" for g_word, fb in game_data["guesses_history"]])

    full_message_parts = [escape_markdown_v2(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫:\n") + f"{history_text}\n"]
    full_message_parts.append(f"{alphabet_status_text}\n")

    if guess == target_word:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨: —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        win_part1 = escape_markdown_v2(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ ")
        win_part2 = f"**{escape_markdown_v2(target_word.upper())}**"
        win_part3 = escape_markdown_v2(f" –∑–∞ {game_data['attempts']} –ø–æ–ø—ã—Ç–æ–∫!")  # "!" —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
        full_message_parts.append(win_part1 + win_part2 + win_part3)
        reply_markup = get_game_over_keyboard("game_start_wordle")
        clear_game_state(context)
    elif game_data["attempts"] >= WORDLE_MAX_GUESSES:
        lose_part1 = escape_markdown_v2(f"üòî –£–≤—ã, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: ")
        lose_part2 = f"**{escape_markdown_v2(target_word.upper())}**"
        lose_part3 = escape_markdown_v2(".")  # "." —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è
        full_message_parts.append(lose_part1 + lose_part2 + lose_part3)
        reply_markup = get_game_over_keyboard("game_start_wordle")
        clear_game_state(context)
    else:
        full_message_parts.append(escape_markdown_v2(
            f"–ü–æ–ø—ã—Ç–∫–∞ {game_data['attempts']}/{WORDLE_MAX_GUESSES}. –í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ."))

    await update.message.reply_text(
        "\n".join(full_message_parts),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä ---
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    active_game = context.user_data.get('active_game')

    if update.message and update.message.text:
        text = update.message.text
        if text == "–ê–Ω–µ–∫–¥–æ—Ç üòÇ":
            await joke_command_action(update, context)
            return
        if text == "–§–∞–∫—Ç üí°":
            await fact_command_action(update, context)
            return
        if text == "–ò–≥—Ä—ã üéÆ":
            await game_menu_command_action(update, context)
            return
        if text == "–ü–æ–º–æ—â—å ‚ùì":
            await help_command_action(update, context)
            return

    if active_game and update.message and update.message.text:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã: {active_game} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        if active_game == 'guess_number':
            await handle_guess_number_input(update, context)
        elif active_game == 'cities':
            await handle_cities_input(update, context)
        elif active_game == 'hangman':
            await handle_hangman_input(update, context)
        elif active_game == 'wordle':
            await handle_wordle_input(update, context)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω CallbackQuery: {data}")

    if data == "game_start_guess_number":
        await start_guess_number_game(update, context)
    elif data == "game_start_rps":
        await start_rps_game(update, context)
    elif data.startswith("rps_choice_"):
        await handle_rps_choice(update, context)
    elif data == "game_start_cities":
        await start_cities_game(update, context)
    elif data == "game_start_hangman":
        await start_hangman_game(update, context)
    elif data == "game_start_wordle":
        await start_wordle_game(update, context)
    elif data == "show_game_menu":
        await game_menu_command_action(update, context)
    else:
        # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ query, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏.")
        logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callback_data: {data}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data: {DATA_DIR}")

    initialize_data()

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command_action))
    application.add_handler(CommandHandler("stop_game", stop_game_command))
    application.add_handler(
        CommandHandler("guess_number", lambda u, c: start_guess_number_game(u, c, from_command=True)))
    application.add_handler(CommandHandler("rps", lambda u, c: start_rps_game(u, c, from_command=True)))
    application.add_handler(CommandHandler("cities", lambda u, c: start_cities_game(u, c, from_command=True)))
    application.add_handler(CommandHandler("hangman", lambda u, c: start_hangman_game(u, c, from_command=True)))
    application.add_handler(CommandHandler("wordle", lambda u, c: start_wordle_game(u, c, from_command=True)))
    application.add_handler(CommandHandler("joke", joke_command_action))
    application.add_handler(CommandHandler("fact", fact_command_action))
    application.add_handler(CommandHandler("game_menu", game_menu_command_action))

    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN.")
    else:
        main()